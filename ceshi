# 导入函数库
from jqdata import *
from jqfactor import *
import pandas as pd

#初始化函数 
def initialize(context):
    #设定股票池
    set_benchmark('000905.XSHG')
    # 用真实价格交易
    set_option('use_real_price', True)
    # 打开防未来函数
    set_option("avoid_future_data", True)
    # 将滑点设置为0
    set_slippage(FixedSlippage(0))
    # 设置交易成本万分之三
    set_order_cost(OrderCost(open_tax=0, close_tax=0.001, open_commission=0.0003, close_commission=0.0003, close_today_commission=0, min_commission=5),type='fund')
    # 过滤order中低于error级别的日志
    log.set_level('order', 'error')
    #选股参数
    g.stock_num = 5 #持仓数
    # 设置交易时间，每天运行
    run_daily(my_trade, time='9:30', reference_security='000300.XSHG')
from sklearn.cluster import KMeans

def filter_new_stock(context, stock_list):
    # 过滤掉上市时间不足1年的股票
    one_year_ago = context.previous_date - pd.Timedelta(days=365)
    return [stock for stock in stock_list if get_security_info(stock).start_date < one_year_ago]

def filter_kcb_stock(context, stock_list):
    # 过滤掉科创板股票
    return [stock for stock in stock_list if '688' not in stock]

def filter_st_stock(stock_list):
    # 过滤掉ST股票
    q = query(valuation.code).filter(valuation.code.in_(stock_list),valuation.is_st == False)
    return list(get_fundamentals(q)['code'])

def get_stock_list(context):
    yesterday = str(context.previous_date)
    initial_list = get_all_securities().index.tolist()
    initial_list = filter_new_stock(context, initial_list)
    initial_list = filter_kcb_stock(context, initial_list)
    initial_list = filter_st_stock(initial_list)

    factor_values = get_factor_values(initial_list, [
        'operating_revenue_growth_rate', #营业收入增长率
        'total_profit_growth_rate', #利润总额增长率
        'net_profit_growth_rate', #净利润增长率
        'earnings_growth', #5年盈利增长率
        'sales_growth', #5年营业收入增长率
        'market_cap' #总市值
    ], end_date=yesterday, count=1)

    df = pd.DataFrame(index=initial_list, columns=factor_values.keys())
    df['operating_revenue_growth_rate'] = list(factor_values['operating_revenue_growth_rate'].T.iloc[:,0])
    df['total_profit_growth_rate'] = list(factor_values['total_profit_growth_rate'].T.iloc[:,0])
    df['net_profit_growth_rate'] = list(factor_values['net_profit_growth_rate'].T.iloc[:,0])
    df['earnings_growth'] = list(factor_values['earnings_growth'].T.iloc[:,0])
    df['sales_growth'] = list(factor_values['sales_growth'].T.iloc[:,0])
    df['market_cap'] = list(factor_values['market_cap'].T.iloc[:,0])
    df['total_score'] = 0.1*df['operating_revenue_growth_rate'] + 0.35*df['total_profit_growth_rate'] + 0.15*df['net_profit_growth_rate'] + 0.35*df['earnings_growth'] + 0.05*df['sales_growth']

    # 使用聚类算法将股票分为3个簇
    df = df.dropna()

    kmeans = KMeans(n_clusters=3, random_state=0).fit(df[['market_cap', 'total_score']])
    cluster_labels = kmeans.labels_

    # 在每个簇内选出市值最小的50只股票
    final_list = []
    for i in range(3):
        sub_df = df[cluster_labels == i]
        sub_df = sub_df.sort_values(by=['market_cap'], ascending=True)[:50]
        final_list += list(sub_df.index)

    return final_list
    
    
def select_stocks(context, stock_list):
    # 获取前一个交易日的板块行情数据
    yesterday = context.previous_date.strftime('%Y-%m-%d')
    sectors = get_industry(securities=stock_list, date=yesterday)
    sectors = sectors.dropna()

    # 计算各板块的涨幅因子
    sector_returns = {}
    for sector in sectors.unique():
        sector_stocks = sectors[sectors == sector].index.tolist()
        sector_returns[sector] = get_price_change_rate(sector_stocks, end_date=yesterday, count=1)

    # 按涨幅因子排序，选出涨幅最高的三只股票
    final_list = []
    for sector in sorted(sector_returns, key=sector_returns.get, reverse=True):
        sector_stocks = sectors[sectors == sector].index.tolist()
        for stock in stock_list:
            if stock in sector_stocks and stock not in final_list:
                final_list.append(stock)
                if len(final_list) == 3:
                    return final_list




#1-2 开盘前打印自选股
def print_stock_list_before_open(context):
    stock_list = get_stock_list(context)
    stock_list = filter_paused_stock(stock_list)
    stock_list = stock_list[:g.stock_num]
    print('今日自选股:{}'.format(stock_list))



#2-1 开盘时运行函数
def my_trade(context):
    check_out_list = get_stock_list(context)
    check_out_list = filter_limitup_stock(context, check_out_list)
    check_out_list = filter_limitdown_stock(context, check_out_list)
    check_out_list = filter_paused_stock(check_out_list)
    check_out_list = check_out_list[:g.stock_num]
    adjust_position(context, check_out_list)



#3-1 交易函数
def order_target_value_(security, value):
    if value == 0:
        log.debug("Selling out %s" % (security))
    else:
        log.debug("Order %s to value %f" % (security, value))
    return order_target_value(security, value)

def open_position(security, value):
    order = order_target_value_(security, value)
    if order != None and order.filled > 0:
        return True
    return False

def close_position(position):
    security = position.security
    order = order_target_value_(security, 0)  # 可能会因停牌失败
    if order != None:
        if order.status == OrderStatus.held and order.filled == order.amount:
            return True
    return False

def adjust_position(context, buy_stocks):
    for stock in context.portfolio.positions:
        if stock not in buy_stocks:
            log.info("[%s]不在应买入列表中" % (stock))
            position = context.portfolio.positions[stock]
            close_position(position)
        else:
            log.info("[%s]已经持有无需重复买入" % (stock))
    position_count = len(context.portfolio.positions)
    if g.stock_num > position_count:
        value = context.portfolio.cash / (g.stock_num - position_count)
        for stock in buy_stocks:
            if context.portfolio.positions[stock].total_amount == 0:
                if open_position(stock, value):
                    if len(context.portfolio.positions) == g.stock_num:
                        break



#4-1 过滤函数
def filter_paused_stock(stock_list):
    current_data = get_current_data()
    return [stock for stock in stock_list if not current_data[stock].paused]

def filter_st_stock(stock_list):
    current_data = get_current_data()
    return [stock for stock in stock_list
            if not current_data[stock].is_st
            and 'ST' not in current_data[stock].name
            and '*' not in current_data[stock].name
            and '退' not in current_data[stock].name]

def filter_limitup_stock(context, stock_list):
    last_prices = history(1, unit='1m', field='close', security_list=stock_list)
    current_data = get_current_data()
    return [stock for stock in stock_list if stock in context.portfolio.positions.keys()
            or last_prices[stock][-1] < current_data[stock].high_limit]

def filter_limitdown_stock(context, stock_list):
    last_prices = history(1, unit='1m', field='close', security_list=stock_list)
    current_data = get_current_data()
    return [stock for stock in stock_list if stock in context.portfolio.positions.keys()
            or last_prices[stock][-1] > current_data[stock].low_limit]

def filter_kcb_stock(context, stock_list):
    return [stock for stock in stock_list  if stock[0:3] != '688']

def filter_new_stock(context,stock_list):
    yesterday = context.previous_date
    return [stock for stock in stock_list if not yesterday - get_security_info(stock).start_date < datetime.timedelta(days=250)]

def adjust_position(context, buy_stocks):
    # 获取当前持仓股票列表和持仓数量
    positions = context.portfolio.positions
    position_count = len(positions)
    
    # 计算可用资金分配给每只股票的金额
    cash_per_stock = context.portfolio.cash / (g.stock_num - position_count)
    
    # 对于每个已有持仓的股票，检查其是否应该卖出
    for stock in positions:
        # 如果股票不在应买入列表中或者评分比新选股票低，则卖出
        if stock not in buy_stocks or get_stock_score(stock) < get_stock_score(buy_stocks[0]):
            position = positions[stock]
            close_position(position)
    
    # 买入新选股票，如果当前持仓不足目标持仓数
    for i, stock in enumerate(buy_stocks):
        # 如果股票已经持仓，则跳过
        if stock in positions:
            continue
        
        # 计算该股票买入的目标金额
        if position_count + i + 1 < g.stock_num:
            target_value = cash_per_stock
        else:
            target_value = context.portfolio.cash
        
        # 如果新选股票的评分比已有持仓最低的股票高，则卖出持仓最低的股票
        if i == 0 and position_count == g.stock_num and get_stock_score(stock) > get_stock_score(min(positions, key=lambda x: get_stock_score(x)))):
            position = positions[min(positions, key=lambda x: get_stock_score(x))]
            close_position(position)
        
        # 买入该股票
        open_position(stock, target_value)
import talib

def check_buy_condition(stock):
    prices = attribute_history(stock, 60, '1d', ['close'])
    close_prices = prices['close']
    ma20 = talib.SMA(close_prices, timeperiod=20)[-1]
    ma60 = talib.SMA(close_prices, timeperiod=60)[-1]
    current_price = get_current_data()[stock].last_price
    if current_price < ma20 and current_price > ma60:
        return True
    else:
        return False

